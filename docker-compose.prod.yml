version: '3.8'

services:
  # Production Backend
  backend:
    build:
      target: production
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - APP_KEY=${APP_KEY}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MAIL_MAILER=smtp
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_ENCRYPTION=tls
    volumes:
      - backend_storage:/var/www/html/storage
      - backend_cache:/var/www/html/bootstrap/cache
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Production Frontend
  frontend:
    build:
      target: production
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - VITE_APP_NAME=ACME CSR Platform
    volumes: []
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Production Database
  postgres:
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Production Redis
  redis:
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Production Nginx
  nginx:
    volumes:
      - ./docker/nginx/prod.conf:/etc/nginx/nginx.conf
      - ssl_certs:/etc/nginx/certs
    ports:
      - "80:80"
      - "443:443"
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Remove MailHog in production
  mailhog:
    deploy:
      replicas: 0

  # Production Queue Worker with auto-restart
  queue:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      sh -c "while true; do
        php artisan queue:work --verbose --tries=3 --timeout=300 --memory=256 --sleep=3 --max-jobs=1000
        echo 'Queue worker stopped. Restarting...'
        sleep 5
      done"
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Production Scheduler
  scheduler:
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_prod_data:
    driver: local
  backend_storage:
    driver: local
  backend_cache:
    driver: local
  ssl_certs:
    driver: local
